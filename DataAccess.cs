//This code was generated by a tool.
//Changes to this file will be lost if the code is regenerated.
// See the blog post here for help on using the generated code: http://erikej.blogspot.dk/2014/10/database-first-with-sqlite-in-universal.html
using System.Data.SQLite;
using System;
using System.Collections.Generic;
using System.Windows.Controls;

namespace First
{
    public class ItemDb
    {
        public string _path { get; set; } 
        public ItemDb(string path)
        {
            _path = path;
            Connect();
        }

        public void Connect()
        {
            using (SQLiteConnection db = new SQLiteConnection(_path))
            {
                try
                {
                    db.Open();
                    db.Close();
                }
                catch (Exception ex)
                {
                    Console.WriteLine("no connection");
                }
            }
        }
        public int LearntCount ()
        {
            int rowCount = 0;
            using (SQLiteConnection db = new SQLiteConnection(_path))
            {
                db.Open();
                using (SQLiteCommand sqlite_cmd = db.CreateCommand())
                {
                    
                    sqlite_cmd.CommandText = "SELECT Learnt FROM Items WHERE Learnt != \"false\" ORDER BY Learnt DESC";
                    using (SQLiteDataReader dataReader = sqlite_cmd.ExecuteReader())
                    {
                        while (dataReader.HasRows)
                        {
                            dataReader.Read();
                            if (dataReader.GetString(6).Equals(DateTime.Today.ToString().Replace(" 00:00:00", "")))
                            {
                                rowCount++;
                            }   
                        }
                        return rowCount;
                    }
                }
            }
        }
        public Data ReadRow(int index, string stm = "")
        {
            using (SQLiteConnection db = new SQLiteConnection(_path))
            {
                db.Open();
                using (SQLiteCommand sqlite_cmd = db.CreateCommand())
                {
                    sqlite_cmd.CommandText = "SELECT * FROM Items LIMIT 1 OFFSET @index";
                    sqlite_cmd.Parameters.AddWithValue("@index", index);
                    using (SQLiteDataReader dataReader = sqlite_cmd.ExecuteReader())
                    {
                        dataReader.Read();
                        Data data = new Data(dataReader.GetString(0), dataReader.GetInt32(1), dataReader.GetDouble(2),
                            dataReader.GetInt32(3), dataReader.GetString(4), dataReader.GetString(5), dataReader.GetString(6));
                        return data;
                    }
                }
            }
        }

        public void InsertAnswer(string kanji, string stm, int rep = 0, double easiness = 0.0, int interval = 0, string ans = "", string date = "", string learnt = "")
        {
            using (SQLiteConnection db = new SQLiteConnection(_path))
            {
                db.Open();
                using (SQLiteCommand sqlite_cmd = db.CreateCommand())
                {
                    sqlite_cmd.CommandText = stm;
                    if (stm.Contains("@ans"))
                    {
                        sqlite_cmd.Parameters.AddWithValue("@ans", ans);
                    }
                    if (stm.Contains("@repetition")){
                        sqlite_cmd.Parameters.AddWithValue("@repetition", rep);
                    }
                    if(stm.Contains("@easiness"))
                    {
                        sqlite_cmd.Parameters.AddWithValue("@easiness", easiness);
                    }
                    if(stm.Contains("@interval"))
                    {
                        sqlite_cmd.Parameters.AddWithValue("@interval", interval);
                    }
                    if (stm.Contains("@date"))
                    {
                        sqlite_cmd.Parameters.AddWithValue("@date", date);
                    }
                    if (stm.Contains("@learnt"))
                    {
                        sqlite_cmd.Parameters.AddWithValue("@learnt", learnt);
                    }
                    sqlite_cmd.Parameters.AddWithValue("@kanji", kanji);
                    sqlite_cmd.ExecuteNonQuery();
                }
            }

        }

    }

    public struct Data
    {
        public Data (string K, int R, double E, int I, string A, string D, string L)
        {
            kanji = K;
            ans = A;
            repetition = R;
            easiness = E;
            interval = I;
            date = D;
            learnt = L;
        }

        public string kanji { get; set; }
        public string ans { get; set; }
        public int repetition { get; set; }
        public double easiness { get; set; }
        public int interval { get; set; }
        public string date { get; set; }
        public string learnt { get; set; }
    }
    
}
